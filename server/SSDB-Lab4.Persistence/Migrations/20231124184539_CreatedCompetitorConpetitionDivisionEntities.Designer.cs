// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSDB_Lab4.Persistence;

#nullable disable

namespace SSDB_Lab4.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231124184539_CreatedCompetitorConpetitionDivisionEntities")]
    partial class CreatedCompetitorConpetitionDivisionEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SSDB_Lab4.Domain.entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("competition_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("city");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("Name", "StartDate")
                        .IsUnique();

                    b.ToTable("competitions", (string)null);
                });

            modelBuilder.Entity("SSDB_Lab4.Domain.entities.Competitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("competitor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("competition_id");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int")
                        .HasColumnName("division_id");

                    b.Property<int>("LapNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("lap_num");

                    b.Property<int>("SportsmanId")
                        .HasColumnType("int")
                        .HasColumnName("sportsman_id");

                    b.Property<float?>("WeightingResult")
                        .HasColumnType("real")
                        .HasColumnName("weighting_result");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("SportsmanId");

                    b.ToTable("competitors", (string)null);
                });

            modelBuilder.Entity("SSDB_Lab4.Domain.entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("division_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxAge")
                        .HasColumnType("int")
                        .HasColumnName("max_age");

                    b.Property<float?>("MaxWeight")
                        .HasColumnType("real")
                        .HasColumnName("max_weight");

                    b.Property<int>("MinAge")
                        .HasColumnType("int")
                        .HasColumnName("min_age");

                    b.Property<float?>("MinWeight")
                        .HasColumnType("real")
                        .HasColumnName("min_weight");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("divisions", null, t =>
                        {
                            t.HasCheckConstraint("CHK_divisions_sex", "sex IN ('M', 'F')");

                            t.HasCheckConstraint("CHK_divisions_weight", "min_weight IS NOT NULL OR  max_weight IS NOT NULL");
                        });
                });

            modelBuilder.Entity("SSDB_Lab4.Domain.entities.Sportsman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sportsman_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("sex");

                    b.HasKey("Id");

                    b.ToTable("sportsmen", null, t =>
                        {
                            t.HasCheckConstraint("CHK_sportsmen_sex", "sex IN ('M', 'F')");
                        });
                });

            modelBuilder.Entity("SSDB_Lab4.Domain.entities.Competitor", b =>
                {
                    b.HasOne("SSDB_Lab4.Domain.entities.Competition", "Competition")
                        .WithMany("Competitors")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSDB_Lab4.Domain.entities.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSDB_Lab4.Domain.entities.Sportsman", "Sportsman")
                        .WithMany()
                        .HasForeignKey("SportsmanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Division");

                    b.Navigation("Sportsman");
                });

            modelBuilder.Entity("SSDB_Lab4.Domain.entities.Competition", b =>
                {
                    b.Navigation("Competitors");
                });
#pragma warning restore 612, 618
        }
    }
}
